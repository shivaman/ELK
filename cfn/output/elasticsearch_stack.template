{
   "Parameters" : {
      "EnvironmentName" : {
         "Type" : "String",
         "ConstraintDescription" : "must be a valid environment name",
         "Description" : "Name applied to all resources within the stack"
      },
      "StackType" : {
         "Type" : "String",
         "Default" : "Elasticsearch Cluster",
         "ConstraintDescription" : "must be a valid stack type",
         "Description" : "Stack type"
      },
      "DnsResolverOverride" : {
         "Type" : "String",
         "Default" : "",
         "Description" : "Comma-delimited list of one or more DNS resolver IP's"
      },
      "SubnetAz2" : {
         "Type" : "String",
         "AllowedPattern" : "subnet-[a-zA-Z0-9]{8}",
         "Description" : "Subnet within AZ 2 to deploy instances"
      },
      "EsVersion" : {
         "Type" : "String",
         "Default" : "1.3.2",
         "ConstraintDescription" : "must be a valid Elasticsearch version",
         "Description" : "Elasticsearch Version"
      },
      "HealthCheckPort" : {
         "MaxValue" : 65535,
         "Type" : "Number",
         "Default" : 9200,
         "MinValue" : 1,
         "ConstraintDescription" : "must be between 1 and 65535.",
         "Description" : "Elb Health Check Port"
      },
      "VpcId" : {
         "Type" : "String",
         "AllowedPattern" : "vpc-[a-zA-Z0-9]{8}",
         "Description" : "VPC to deploy network resource into"
      },
      "EsRepositoryBucket" : {
         "Type" : "String",
         "ConstraintDescription" : "must be a valid S3 bucket name",
         "Description" : "Repository bucket"
      },
      "KeyName" : {
         "Type" : "String",
         "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances"
      },
      "EsCloudAwsVersion" : {
         "Type" : "String",
         "Default" : "2.3.0",
         "ConstraintDescription" : "must be a valid Elasticsearch Cloud AWS plugin version",
         "Description" : "Elasticsearch Cloud AWS plugin Version"
      },
      "EsClusterName" : {
         "Type" : "String",
         "ConstraintDescription" : "must be a valid Elasticsearch cluster name",
         "Description" : "Elasticsearch cluster name"
      },
      "Owner" : {
         "Type" : "String",
         "ConstraintDescription" : "must be a valid email address",
         "Description" : "Stack owner"
      },
      "MaxInstances" : {
         "MaxValue" : 8,
         "Type" : "Number",
         "Default" : 2,
         "MinValue" : 1,
         "ConstraintDescription" : "must be between 1 and 8.",
         "Description" : "Maximum number of Es instances"
      },
      "HealthCheckUri" : {
         "Type" : "String",
         "Default" : "/_cluster/health",
         "ConstraintDescription" : "must be a valid URI",
         "Description" : "Elb Health Check Uri"
      },
      "SubnetAz1" : {
         "Type" : "String",
         "AllowedPattern" : "subnet-[a-zA-Z0-9]{8}",
         "Description" : "Subnet within AZ 1 to deploy instances"
      },
      "MinInstances" : {
         "MaxValue" : 4,
         "Type" : "Number",
         "Default" : 2,
         "MinValue" : 1,
         "ConstraintDescription" : "must be between 1 and 4.",
         "Description" : "Minimum number of Es instances"
      },
      "EC2InstanceType" : {
         "AllowedValues" : [
            "t1.micro",
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge"
         ],
         "Type" : "String",
         "Default" : "t2.medium",
         "ConstraintDescription" : "must be a valid EC2 instance type",
         "Description" : "EC2 instance type"
      },
      "Project" : {
         "Type" : "String",
         "Description" : "Project name"
      },
      "PrimaryVolumeSize" : {
         "MaxValue" : 1000,
         "Type" : "Number",
         "Default" : 50,
         "MinValue" : 1,
         "ConstraintDescription" : "must be between 1 and 750.",
         "Description" : "Primary Volume Size in Gb"
      }
   },
   "Resources" : {
      "EsCPUAlarmHigh" : {
         "DependsOn" : [
            "EsScaleUpPolicy"
         ],
         "Type" : "AWS::CloudWatch::Alarm",
         "Properties" : {
            "Dimensions" : [
               {
                  "Value" : {
                     "Ref" : "AutoScalingGroup"
                  },
                  "Name" : "AutoScalingGroupName"
               }
            ],
            "EvaluationPeriods" : 5,
            "AlarmActions" : [
               {
                  "Ref" : "EsScaleUpPolicy"
               }
            ],
            "Period" : 60,
            "ComparisonOperator" : "GreaterThanThreshold",
            "Statistic" : "Average",
            "Namespace" : "AWS/EC2",
            "AlarmDescription" : "Scale-up if CPU > 65% for 5 minutes",
            "Threshold" : 65,
            "MetricName" : "CPUUtilization"
         }
      },
      "LaunchConfig" : {
         "DependsOn" : [
            "InstanceProfile"
         ],
         "Type" : "AWS::AutoScaling::LaunchConfiguration",
         "Properties" : {
            "KeyName" : {
               "Ref" : "KeyName"
            },
            "ImageId" : {
               "Fn::FindInMap" : [
                  "AWSEC2RegionArch2AMI",
                  {
                     "Ref" : "AWS::Region"
                  },
                  {
                     "Fn::FindInMap" : [
                        "AWSEC2InstanceType2Arch",
                        {
                           "Ref" : "EC2InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "InstanceType" : {
               "Ref" : "EC2InstanceType"
            },
            "BlockDeviceMappings" : [
               {
                  "Ebs" : {
                     "VolumeSize" : {
                        "Ref" : "PrimaryVolumeSize"
                     },
                     "DeleteOnTermination" : "true",
                     "VolumeType" : "gp2"
                  },
                  "DeviceName" : "/dev/xvda"
               }
            ],
            "UserData" : {
               "Fn::Base64" : {
                  "Fn::Join" : [
                     "",
                     [
                        "#!/bin/bash -v \n",
                        "yum update -y\n",
                        "# Helper function\n",
                        "function error_exit\n",
                        "{\n",
                        "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                        {
                           "Ref" : "WaitHandle"
                        },
                        "'\n",
                        "  exit 1\n",
                        "}\n",
                        "# CloudFormation init start\n",
                        "/opt/aws/bin/cfn-init -v -c default -s ",
                        {
                           "Ref" : "AWS::StackId"
                        },
                        " -r LaunchConfig --region ",
                        {
                           "Ref" : "AWS::Region"
                        },
                        "\n",
                        "# Determine if es installed successfully\n",
                        "if [[ ! -e /usr/local/elasticsearch/elasticsearch/bin/elasticsearch ]]; then\n",
                        "  error_exit \"elasticsearch failed to install successfully\"\n",
                        "fi\n",
                        "# Determine if the es configuration was successful\n",
                        "$(grep -q ",
                        {
                           "Ref" : "EsClusterName"
                        },
                        " /usr/local/elasticsearch/elasticsearch/config/elasticsearch.yml)\n",
                        "if [[ $? != 0 ]]; then\n",
                        "        error_exit \"elasticsearch configuration failed\"\n",
                        "fi\n",
                        "# Determine if es started successfully\n",
                        "$(ps cax |grep -q elasticsearch-l)\n",
                        "if [[ $? != 0 ]]; then\n",
                        "        error_exit \"elasticsearch failed to start\"\n",
                        "fi\n",
                        "## CloudFormation signal that setup is complete\n",
                        "/opt/aws/bin/cfn-signal -e 0 -r \"Elasticsearch setup complete\" '",
                        {
                           "Ref" : "WaitHandle"
                        },
                        "'\n"
                     ]
                  ]
               }
            },
            "IamInstanceProfile" : {
               "Ref" : "InstanceProfile"
            },
            "SecurityGroups" : [
               {
                  "Ref" : "LinuxEsSg"
               }
            ]
         },
         "Metadata" : {
            "AWS::CloudFormation::Init" : {
               "installPlugins" : {
                  "commands" : {
                     "installEsCloudAws" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "cd /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 " && bin/plugin -install elasticsearch/elasticsearch-cloud-aws/",
                                 {
                                    "Ref" : "EsCloudAwsVersion"
                                 }
                              ]
                           ]
                        }
                     }
                  }
               },
               "runEsDaemon" : {
                  "commands" : {
                     "runEs" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "cd /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 " && bin/elasticsearch -d"
                              ]
                           ]
                        }
                     }
                  }
               },
               "runEsAsService" : {
                  "sources" : {
                     "/usr/local/elasticsearch" : {
                        "Fn::Join" : [
                           "",
                           [
                              "https://github.com/elasticsearch/elasticsearch-servicewrapper/zipball/master"
                           ]
                        ]
                     }
                  },
                  "commands" : {
                     "5-startEsService" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "/usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin/service/elasticsearch64 start"
                              ]
                           ]
                        }
                     },
                     "2-fixEsPermssions" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "chmod +x -R /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin/service/*"
                              ]
                           ]
                        }
                     },
                     "3-updateEsServiceConfig" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "sed -e 's/<Path to Elasticsearch Home>/\\/usr\\/local\\/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "\\/elasticsearch/g' /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin/service/elasticsearch.conf -i"
                              ]
                           ]
                        }
                     },
                     "4-installEsService" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "/usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin/service/elasticsearch64 install"
                              ]
                           ]
                        }
                     },
                     "6-chkEsService" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "/sbin/chkconfig --level 2345 elasticsearch on"
                              ]
                           ]
                        }
                     },
                     "1-moveWrapper" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "cd /usr/local/elasticsearch && mv service /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin"
                              ]
                           ]
                        }
                     }
                  }
               },
               "fixPermissions" : {
                  "commands" : {
                     "fixEsPermssions" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "chmod +x /usr/local/elasticsearch/elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 "/bin/*"
                              ]
                           ]
                        }
                     }
                  }
               },
               "createEsConfig" : {
                  "files" : {
                     "/usr/local/elasticsearch/elasticsearch/config/elasticsearch.yml" : {
                        "content" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "cluster:\n",
                                 " name: ",
                                 {
                                    "Ref" : "EsClusterName"
                                 },
                                 "\n",
                                 "\n",
                                 "discovery:\n",
                                 "  type: ec2\n",
                                 "\n",
                                 "  ec2:\n",
                                 "   groups: ",
                                 {
                                    "Ref" : "LinuxEsSg"
                                 },
                                 "\n",
                                 "\n",
                                 "cloud:\n",
                                 " aws:\n",
                                 "  region: ",
                                 {
                                    "Ref" : "AWS::Region"
                                 },
                                 "\n",
                                 "\n",
                                 "discovery.zen.ping.multicast.enabled: false\n"
                              ]
                           ]
                        }
                     }
                  }
               },
               "configSets" : {
                  "default" : [
                     "download",
                     "fixPermissions",
                     "installPlugins",
                     "createEsConfig",
                     "dnsOverride",
                     "runEsAsService"
                  ]
               },
               "dnsOverride" : {
                  "commands" : {
                     "overrideDns" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "DnsResolverOverride=\"",
                                 {
                                    "Ref" : "DnsResolverOverride"
                                 },
                                 "\"\n",
                                 "if [[ -n ${DnsResolverOverride} ]]; then\n",
                                 " sed -i 's/^PEERDNS.*/PEERDNS=no/g' /etc/sysconfig/network-scripts/ifcfg-eth0\n",
                                 " sed -i '/^nameserver/ d' /etc/resolv.conf\n",
                                 "\n",
                                 "DnsResolverList=$(echo ${DnsResolverOverride} | sed s/,/\\\n/g)\n",
                                 "for resolver in $(echo ${DnsResolverList}); do\n",
                                 " echo \"nameserver $resolver\" >> /etc/resolv.conf\n",
                                 "done\n",
                                 "fi\n"
                              ]
                           ]
                        }
                     }
                  }
               },
               "download" : {
                  "sources" : {
                     "/usr/local/elasticsearch" : {
                        "Fn::Join" : [
                           "",
                           [
                              "https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-",
                              {
                                 "Ref" : "EsVersion"
                              },
                              ".zip"
                           ]
                        ]
                     }
                  },
                  "commands" : {
                     "createSymlink" : {
                        "command" : {
                           "Fn::Join" : [
                              "",
                              [
                                 "cd /usr/local/elasticsearch && ln -s elasticsearch-",
                                 {
                                    "Ref" : "EsVersion"
                                 },
                                 " elasticsearch"
                              ]
                           ]
                        }
                     }
                  }
               }
            }
         }
      },
      "WaitHandle" : {
         "Type" : "AWS::CloudFormation::WaitConditionHandle"
      },
      "LinuxEsAnyEs" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "ToPort" : 9299,
            "GroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "FromPort" : 9200,
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0"
         }
      },
      "EsScaleDownPolicy" : {
         "DependsOn" : "AutoScalingGroup",
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
            "AdjustmentType" : "ChangeInCapacity",
            "ScalingAdjustment" : -2,
            "AutoScalingGroupName" : {
               "Ref" : "AutoScalingGroup"
            },
            "Cooldown" : 60
         }
      },
      "InstanceRole" : {
         "Type" : "AWS::IAM::Role",
         "Properties" : {
            "AssumeRolePolicyDocument" : {
               "Statement" : [
                  {
                     "Effect" : "Allow",
                     "Action" : [
                        "sts:AssumeRole"
                     ],
                     "Principal" : {
                        "Service" : [
                           "ec2.amazonaws.com"
                        ]
                     }
                  }
               ]
            },
            "Policies" : [
               {
                  "PolicyDocument" : {
                     "Statement" : [
                        {
                           "Effect" : "Allow",
                           "Resource" : [
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       "arn:aws:s3:::",
                                       {
                                          "Ref" : "EsRepositoryBucket"
                                       }
                                    ]
                                 ]
                              }
                           ],
                           "Action" : [
                              "s3:ListBucket"
                           ]
                        },
                        {
                           "Effect" : "Allow",
                           "Resource" : [
                              {
                                 "Fn::Join" : [
                                    "",
                                    [
                                       "arn:aws:s3:::",
                                       {
                                          "Ref" : "EsRepositoryBucket"
                                       },
                                       "/*"
                                    ]
                                 ]
                              }
                           ],
                           "Action" : [
                              "s3:GetObject",
                              "s3:PutObject",
                              "s3:DeleteObject"
                           ]
                        }
                     ]
                  },
                  "PolicyName" : "S3EsRepositoryBucketAccess"
               },
               {
                  "PolicyDocument" : {
                     "Statement" : [
                        {
                           "Effect" : "Allow",
                           "Resource" : "*",
                           "Action" : [
                              "ec2:DescribeInstances"
                           ]
                        }
                     ]
                  },
                  "PolicyName" : "EC2DescribeInstancesAccess"
               }
            ],
            "Path" : "/"
         }
      },
      "EsCPUAlarmLow" : {
         "DependsOn" : [
            "EsScaleDownPolicy"
         ],
         "Type" : "AWS::CloudWatch::Alarm",
         "Properties" : {
            "Dimensions" : [
               {
                  "Value" : {
                     "Ref" : "AutoScalingGroup"
                  },
                  "Name" : "AutoScalingGroupName"
               }
            ],
            "EvaluationPeriods" : 20,
            "AlarmActions" : [
               {
                  "Ref" : "EsScaleDownPolicy"
               }
            ],
            "Period" : 60,
            "ComparisonOperator" : "LessThanThreshold",
            "Statistic" : "Average",
            "Namespace" : "AWS/EC2",
            "AlarmDescription" : "Scale-down if CPU < 35% for 20 minutes",
            "Threshold" : 35,
            "MetricName" : "CPUUtilization"
         }
      },
      "InternalElb" : {
         "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties" : {
            "HealthCheck" : {
               "Interval" : 6,
               "Target" : {
                  "Fn::Join" : [
                     "",
                     [
                        "HTTP",
                        ":",
                        {
                           "Ref" : "HealthCheckPort"
                        },
                        {
                           "Ref" : "HealthCheckUri"
                        }
                     ]
                  ]
               },
               "Timeout" : 5,
               "UnhealthyThreshold" : 7,
               "HealthyThreshold" : 7
            },
            "Subnets" : [
               {
                  "Ref" : "SubnetAz1"
               },
               {
                  "Ref" : "SubnetAz2"
               }
            ],
            "Scheme" : "internal",
            "Listeners" : [
               {
                  "InstancePort" : "9200",
                  "Protocol" : "HTTP",
                  "LoadBalancerPort" : "9200"
               }
            ],
            "ConnectionDrainingPolicy" : {
               "Enabled" : true,
               "Timeout" : 300
            },
            "CrossZone" : true,
            "SecurityGroups" : [
               {
                  "Ref" : "InternalEsElbSg"
               }
            ]
         }
      },
      "LinuxEsAnySsh" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "ToPort" : 22,
            "GroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "FromPort" : 22,
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0"
         }
      },
      "LinuxEsSg" : {
         "Type" : "AWS::EC2::SecurityGroup",
         "Properties" : {
            "VpcId" : {
               "Ref" : "VpcId"
            },
            "GroupDescription" : "Elasticsearch Instances Security Group"
         }
      },
      "InternalEsElbSg" : {
         "Type" : "AWS::EC2::SecurityGroup",
         "Properties" : {
            "VpcId" : {
               "Ref" : "VpcId"
            },
            "GroupDescription" : "Internal Elasticsearch Elastic Load Balancer Security Group"
         }
      },
      "InternalElbAnyEs" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "ToPort" : 9299,
            "GroupId" : {
               "Ref" : "InternalEsElbSg"
            },
            "FromPort" : 9200,
            "IpProtocol" : "tcp",
            "CidrIp" : "0.0.0.0/0"
         }
      },
      "WaitCondition" : {
         "Type" : "AWS::CloudFormation::WaitCondition",
         "Properties" : {
            "Timeout" : 1200,
            "Handle" : {
               "Ref" : "WaitHandle"
            }
         }
      },
      "LinuxEsAnyAll" : {
         "Type" : "AWS::EC2::SecurityGroupEgress",
         "Properties" : {
            "ToPort" : 65535,
            "GroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "FromPort" : 0,
            "IpProtocol" : "-1",
            "CidrIp" : "0.0.0.0/0"
         }
      },
      "InstanceProfile" : {
         "DependsOn" : "InstanceRole",
         "Type" : "AWS::IAM::InstanceProfile",
         "Properties" : {
            "Roles" : [
               {
                  "Ref" : "InstanceRole"
               }
            ],
            "Path" : "/"
         }
      },
      "EsScaleUpPolicy" : {
         "DependsOn" : "AutoScalingGroup",
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
            "AdjustmentType" : "ChangeInCapacity",
            "ScalingAdjustment" : 2,
            "AutoScalingGroupName" : {
               "Ref" : "AutoScalingGroup"
            },
            "Cooldown" : 60
         }
      },
      "ElbAnyAll" : {
         "Type" : "AWS::EC2::SecurityGroupEgress",
         "Properties" : {
            "ToPort" : 65535,
            "GroupId" : {
               "Ref" : "InternalEsElbSg"
            },
            "FromPort" : 0,
            "IpProtocol" : "-1",
            "CidrIp" : "0.0.0.0/0"
         }
      },
      "AutoScalingGroup" : {
         "DependsOn" : [
            "LaunchConfig"
         ],
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "MaxSize" : {
               "Ref" : "MaxInstances"
            },
            "MinSize" : {
               "Ref" : "MinInstances"
            },
            "LoadBalancerNames" : [
               {
                  "Ref" : "InternalElb"
               }
            ],
            "AvailabilityZones" : {
               "Fn::GetAZs" : ""
            },
            "DesiredCapacity" : {
               "Ref" : "MinInstances"
            },
            "LaunchConfigurationName" : {
               "Ref" : "LaunchConfig"
            },
            "HealthCheckGracePeriod" : 1200,
            "Tags" : [
               {
                  "Value" : {
                     "Ref" : "Owner"
                  },
                  "PropagateAtLaunch" : true,
                  "Key" : "Owner"
               },
               {
                  "Value" : {
                     "Ref" : "Project"
                  },
                  "PropagateAtLaunch" : true,
                  "Key" : "Project"
               },
               {
                  "Value" : {
                     "Ref" : "EnvironmentName"
                  },
                  "PropagateAtLaunch" : true,
                  "Key" : "Environment Name"
               },
               {
                  "Value" : {
                     "Ref" : "EnvironmentName"
                  },
                  "PropagateAtLaunch" : true,
                  "Key" : "Name"
               },
               {
                  "Value" : {
                     "Ref" : "StackType"
                  },
                  "PropagateAtLaunch" : true,
                  "Key" : "StackType"
               }
            ],
            "HealthCheckType" : "ELB",
            "VPCZoneIdentifier" : [
               {
                  "Ref" : "SubnetAz1"
               },
               {
                  "Ref" : "SubnetAz2"
               }
            ]
         }
      },
      "LinuxEsEsTransport" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "ToPort" : 9300,
            "GroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "FromPort" : 9300,
            "SourceSecurityGroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "IpProtocol" : "tcp"
         }
      },
      "InternalElbLinuxEs" : {
         "Type" : "AWS::EC2::SecurityGroupIngress",
         "Properties" : {
            "ToPort" : 9299,
            "GroupId" : {
               "Ref" : "LinuxEsSg"
            },
            "FromPort" : 9200,
            "SourceSecurityGroupId" : {
               "Ref" : "InternalEsElbSg"
            },
            "IpProtocol" : "tcp"
         }
      }
   },
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Outputs" : {
      "LoadBalancer" : {
         "Value" : {
            "Ref" : "InternalElb"
         },
         "Description" : "Load Balancer"
      },
      "LoadBalancerHostname" : {
         "Value" : {
            "Fn::GetAtt" : [
               "InternalElb",
               "DNSName"
            ]
         },
         "Description" : "Load Balancer Hostname"
      },
      "InternalEsElbSg" : {
         "Value" : {
            "Ref" : "InternalEsElbSg"
         },
         "Description" : "Internal Elasticsearch Elastic Load Balancer Security Group"
      },
      "LinuxEsSg" : {
         "Value" : {
            "Ref" : "LinuxEsSg"
         },
         "Description" : "Linux Elasticsearch Security Group"
      }
   },
   "Mappings" : {
      "AWSEC2InstanceType2Arch" : {
         "t2.micro" : {
            "Arch" : "64HVM"
         },
         "t1.micro" : {
            "Arch" : "64HVM"
         },
         "m1.medium" : {
            "Arch" : "64HVM"
         },
         "c3.4xlarge" : {
            "Arch" : "64HVM"
         },
         "m3.xlarge" : {
            "Arch" : "64HVM"
         },
         "c3.large" : {
            "Arch" : "64HVM"
         },
         "t2.medium" : {
            "Arch" : "64HVM"
         },
         "m1.large" : {
            "Arch" : "64HVM"
         },
         "m1.xlarge" : {
            "Arch" : "64HVM"
         },
         "m3.large" : {
            "Arch" : "64HVM"
         },
         "c3.2xlarge" : {
            "Arch" : "64HVM"
         },
         "m1.small" : {
            "Arch" : "64HVM"
         },
         "c3.xlarge" : {
            "Arch" : "64HVM"
         },
         "t2.small" : {
            "Arch" : "64HVM"
         },
         "m3.medium" : {
            "Arch" : "64HVM"
         },
         "c3.8xlarge" : {
            "Arch" : "64HVM"
         },
         "m3.2xlarge" : {
            "Arch" : "64HVM"
         }
      },
      "AWSEC2RegionArch2AMI" : {
         "sa-east-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-936cc68e"
         },
         "eu-west-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-768e2901"
         },
         "ap-southeast-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-d2e1c580"
         },
         "ap-northeast-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-45072844"
         },
         "us-east-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-34842d5c"
         },
         "us-west-2" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-8586c6b5"
         },
         "ap-southeast-2" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-fb4724c1"
         },
         "us-west-1" : {
            "32" : "NOT_YET_SUPPORTED",
            "64" : "NOT_YET_SUPPORTED",
            "64HVM" : "ami-dba8a19e"
         }
      }
   },
   "Description" : "Linux Elasticsearch Stack"
}
